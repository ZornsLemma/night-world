from __future__ import print_function
import sys

def pack(room_binary):
    assert len(room_binary) == 20 * 18
    byte_binary = [room_binary[i:i+8] for i in range(0, len(room_binary), 8)]
    result = ""
    for i in range(0, len(byte_binary), 5):
        result += "    equb " + ", ".join("%" + byte_binary[j] for j in range(i, i+5)) + "\n"
    return result

with open(sys.argv[1], "r") as f_in:
    with open(sys.argv[2], "w") as f_out:
        print("; This file is auto-generated by pack-rooms.py.", file=f_out)
        print("; DON'T EDIT IT BY HAND, YOUR CHANGES WILL BE OVERWRITTEN!\n", file=f_out)

        room_binary = ""
        for line in f_in:
            line = line[:-1]

            if "room_row" in line:
                line = line.strip()
                i = line.index("%")
                binary_chunk = line[i+1:i+21]
                # The original game has a wall in the data for room L and
                # removes it in code when it isn't wanted. We do the opposite
                # and remove it in the room data and draw it in code when it is
                # wanted. This "SPECIAL" hack allows the room data to be shared
                # by both builds.
                if "SPECIAL" in line:
                    binary_chunk = binary_chunk[:-1] + "0"
                room_binary += binary_chunk
            else:
                if line.lstrip().startswith("."):
                    if len(room_binary) > 0:
                        print(pack(room_binary), file=f_out)
                        room_binary = ""
                print(line, file=f_out)

        if len(room_binary) > 0:
            print(pack(room_binary), file=f_out)
